---
import { AUTH_SECRET_TOKEN } from 'astro:env/server';
import Layout from 'src/layouts/Layout.astro';
import { authCoreGraphicsCookieName } from 'src/services/core-graphics/constants';
import ScoresControl from './ScoresControl.astro';
import ViewTimeAndSetTimeOffset from './ViewTimeAndSetTimeOffset.astro';

export const prerender = false;

const isAuth = Astro.cookies.get(authCoreGraphicsCookieName)?.value === AUTH_SECRET_TOKEN;
if (!isAuth) {
  return Astro.redirect('/core-graphics/setup');
}
---

<Layout title='Control core graphics'>
  <h1>Control the core graphics</h1>
  <p id='notification'></p>

  <ViewTimeAndSetTimeOffset />

  <section>
    <h2>Score controls</h2>

    <ScoresControl />
  </section>

  <section>
    <h2>Advertising</h2>

    <form action='#' id='advertising'>
      <fieldset>
        <label for='advertisingTime'>Time to show the advertising in secs</label>
        <input type='number' id='advertisingTime' name='time' value='30' />
        <label for='advertisingEnabled'>Enable advertising</label>
        <input type='checkbox' id='advertisingEnabled' name='advertisingEnabled' checked />
      </fieldset>
    </form>
  </section>

  <script>
    import { actions } from 'astro:actions';

    const advertisingForm = document.querySelector('form#advertising') as HTMLFormElement;
    const notification = document.querySelector('p#notification') as HTMLParagraphElement;
    const timeInput = advertisingForm?.querySelector('input#advertisingTime') as HTMLInputElement;
    const enabledInput = advertisingForm?.querySelector(
      'input#advertisingEnabled'
    ) as HTMLInputElement;

    enabledInput?.addEventListener('change', async (event) => {
      const enabled = (event.target as HTMLInputElement).checked;
      const action = enabled ? 'SHOW' : 'HIDE';
      const input = timeInput.valueAsNumber;
      try {
        if (input && input > 0) {
          const payload = { duration: input * 1000 };
          await actions.ably.advertising.hideShow.orThrow({ action, payload });
        } else {
          await actions.ably.advertising.hideShow.orThrow({ action });
        }
        notification.textContent = `Advertising ${action.toLowerCase()}d`;
      } catch (error) {
        console.error(error);
        notification.textContent = 'Error setting the advertising';
      } finally {
        setTimeout(() => {
          notification.textContent = '';
        }, 3000);
      }
    });
  </script>
  <style>
    p#notification {
      width: 100%;
      height: 2rem;
    }
  </style>

  <style is:global>
    section,
    form {
      display: flex;
      gap: 1rem;
      flex-direction: column;
    }

    fieldset {
      display: flex;
      gap: 2rem;
      flex-direction: row;
      margin: 0.5rem 0;
      padding: 0.5rem;
      align-items: center;
      justify-content: center;
    }

    section {
      margin-top: 2rem;
    }
  </style>
</Layout>
