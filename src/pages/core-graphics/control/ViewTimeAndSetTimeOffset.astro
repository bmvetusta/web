---
import { AUTH_SECRET_TOKEN } from 'astro:env/server';
import { authCoreGraphicsCookieName } from 'src/services/core-graphics/constants';

export const partial = true;
const isAuth = Astro.cookies.get(authCoreGraphicsCookieName)?.value === AUTH_SECRET_TOKEN;
if (!isAuth) {
  return Astro.redirect('/core-graphics/setup');
}
---

<section>
  <h2>Time Controls</h2>
  <form action='#' id='timer-controls'>
    <fieldset>
      <legend>Timer Controls</legend>
      <button id='set-1st'>Set 1st</button>
      <button id='set-2nd'>Set 2nd</button>
    </fieldset>
    <fieldset>
      <button id='toggle'>Pause/Resume</button>
      <button id='reset'>Reset</button>
    </fieldset>
  </form>

  <form action='#' id='set-offset'>
    <fieldset>
      <legend>Set Time Offset</legend>
      <label for='minutes'>Minutes:</label>
      <input type='number' name='minutes' min='0' max='90' value='0' />
      <label for='seconds'>Seconds:</label>
      <input type='number' name='seconds' min='0' max='59' value='0' />
      <input type='submit' value='Set Offset' />
      <small></small>
    </fieldset>

    <fieldset>
      <legend>Add Time Offset</legend>
      <label for='minutes'>Minutes:</label>
      <input type='number' name='addMinutes' min='-90' max='90' value='0' />
      <label for='seconds'>Seconds:</label>
      <input type='number' name='addSeconds' min='-300' max='300' value='2' />
      <button id='add-offset'>Add Offset</button>
    </fieldset>
  </form>
</section>

<script>
  import { actions } from 'astro:actions';
  import { TimerAction } from 'src/schema/timer/actions/type';
  import { TimerMessageAction } from 'src/schema/timer/messages/action';
  import { stopwatchSubscribe } from 'src/services/stopwatch/subscribe';

  declare global {
    interface Window {
      currentTimerName: string | null;
      currentTimerIndex: number | null;
      isCurrentTimerRunning: boolean;
    }
  }

  const $ = (selector: string) => document.querySelector(selector);
  const setMinutesElement = $('form#set-offset input[name="minutes"]') as HTMLInputElement;
  const setSecondsElement = $('form#set-offset input[name="seconds"]') as HTMLInputElement;
  const formSetOffsetElement = $('form#set-offset') as HTMLFormElement;
  const addOffsetBtn = $('button#add-offset') as HTMLButtonElement;
  window.currentTimerName = null;
  window.currentTimerIndex = null;
  window.isCurrentTimerRunning = false;

  stopwatchSubscribe({
    onTick: (timerMessage) => {
      if (!timerMessage.ok) {
        console.error('Error receiving timer message', timerMessage);
      }
      const {
        elapsed: { hours = 0, minutes = 0, seconds = 0 },
      } = timerMessage.payload;

      window.isCurrentTimerRunning = true;
      const mins = hours + minutes;
      setMinutesElement.value = mins.toString();
      setSecondsElement.value = seconds.toString();
    },
    onError: (error) => {
      console.error('Error receiving timer message', error);
      window.currentTimerName = error.name;
      const notification = $('p#notification');
      if (notification) {
        notification.textContent = `Timer Error (${error.action}): ${error.error}`;
        setTimeout(() => {
          notification.textContent = '';
        }, 3_000);
      }
    },
    onSuccess: (timerMessage) => {
      window.currentTimerName = timerMessage.name;

      if (
        timerMessage.action === TimerMessageAction.PAUSE ||
        timerMessage.action === TimerMessageAction.STOP ||
        (timerMessage.action === TimerMessageAction.DELETE_TIMER &&
          timerMessage.name === window.currentTimerName)
      ) {
        window.isCurrentTimerRunning = false;
      }

      if (
        timerMessage.action === TimerMessageAction.START ||
        timerMessage.action === TimerMessageAction.RESUME
      ) {
        window.isCurrentTimerRunning = true;
      }

      const notification = $('p#notification');
      if (notification) {
        $('p#notification')!.textContent = `Timer ${timerMessage.name} ${timerMessage.action} OK`;
        setTimeout(() => {
          $('p#notification')!.textContent = '';
        }, 3_000);
      }
    },
    onLimitReached: (timerMessage) => {
      window.isCurrentTimerRunning = false;

      const notification = $('p#notification');
      if (notification) {
        $('p#notification')!.textContent = `Timer ${timerMessage.payload.name} reached limit`;
        setTimeout(() => {
          $('p#notification')!.textContent = '';
        }, 3_000);
      }
    },
  });

  formSetOffsetElement?.addEventListener('submit', async (event: SubmitEvent) => {
    event.preventDefault();
    const minutes = Number(setMinutesElement?.valueAsNumber ?? 0);
    const seconds = Number(setSecondsElement?.valueAsNumber ?? 0);
    if (isNaN(minutes) || isNaN(seconds) || !window.currentTimerName) {
      console.error('Invalid minutes or seconds', {
        minutes,
        seconds,
        currentTimerName: window.currentTimerName,
      });
      return;
    }

    const offset = minutes * 60_000 + seconds * 1_000;
    const response = await actions.liveGraphics.stopwatch.offset({
      type: TimerAction.SET_OFFSET,
      name: window.currentTimerName,
      payload: offset,
    });

    const notification = $('p#notification');
    if (notification) {
      if (response.data) {
        notification.textContent = 'Offset set';
      }

      if (response.error) {
        notification.textContent = 'Error setting offset';
      }

      setTimeout(() => {
        notification.textContent = '';
      }, 3_000);
    }
  });

  addOffsetBtn?.addEventListener('click', (event) => {
    event.preventDefault();
    const addMinutesElement = $('form#set-offset input[name="addMinutes"]') as HTMLInputElement;
    const addSecondsElement = $('form#set-offset input[name="addSeconds"]') as HTMLInputElement;
    const minutes = Number(addMinutesElement?.valueAsNumber ?? 0);
    const seconds = Number(addSecondsElement?.valueAsNumber ?? 0);
    if (isNaN(minutes) || isNaN(seconds) || !window.currentTimerName) {
      console.error('Invalid minutes or seconds', {
        minutes,
        seconds,
        currentTimerName: window.currentTimerName,
      });
      return;
    }

    const offsetMs = minutes * 60_000 + seconds * 1_000;
    actions.liveGraphics.stopwatch.offset.orThrow({
      name: window.currentTimerName,
      payload: offsetMs,
    });
  });

  const timers = [
    {
      name: '1T',
      opts: { limit: '00:30:00', start: 0 },
    },
    {
      name: '2T',
      opts: {
        limit: '00:60:00',
        offset: '00:30:00',
        start: 0,
      },
    },
  ];

  timers.forEach(async (timer) => {
    await actions.liveGraphics.stopwatch.startCreateSet.orThrow({
      name: timer.name,
      type: TimerAction.CREATE_OR_SET,
      payload: timer.opts,
    });
  });

  window.currentTimerIndex = 0;
  window.currentTimerName = timers[0].name;

  function setTimer(idx: number) {
    try {
      window.currentTimerIndex = idx ?? window.currentTimerIndex;
      if (Number.isNaN(window.currentTimerIndex)) {
        console.error({
          idx,
          currentTimerIndex: window.currentTimerIndex,
          currentTimerName: window.currentTimerName,
        });
        throw new Error('No index was set');
      }
      const currentTimer = timers.at(window.currentTimerIndex);
      if (!currentTimer) {
        throw new Error('Timer does not exists');
      }
      return actions.liveGraphics.stopwatch.startCreateSet.orThrow({
        type: TimerAction.CREATE_OR_SET,
        name: currentTimer.name,
        payload: currentTimer.opts,
      });
    } catch (error) {
      console.error('Error pausing timer', error);
    }
  }

  function actionToTimer(type: TimerAction) {
    try {
      if (Number.isNaN(window.currentTimerIndex)) {
        throw new Error('No index was set');
      }

      const currentTimer = timers.at(window.currentTimerIndex as number);
      if (!currentTimer) {
        throw new Error('Timer does not exists');
      }

      const opts = structuredClone(currentTimer.opts);
      opts.start = Date.now();

      return actions.liveGraphics.stopwatch.actionToTimerName.orThrow({
        type: type,
        name: currentTimer.name,
        opts: currentTimer.opts,
      });
    } catch (error) {
      console.error('Error "%s" timer', type, error);
    }
  }

  $('#set-1st')?.addEventListener('click', async () => {
    await setTimer(0);
  });
  $('#set-2nd')?.addEventListener('click', async () => {
    await setTimer(1);
  });
  $('#toggle')?.addEventListener('click', async () => {
    await actionToTimer(TimerAction.TOGGLE);
  });
  $('#reset')?.addEventListener('click', async () => {
    await actionToTimer(TimerAction.RESET);
  });
</script>
